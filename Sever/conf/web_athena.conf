//--------------------------------------------------------------
// Giraffe<模擬器> - WEB 接口服務器配置文件
// 由Giraffe<模擬器>開發團隊翻譯成中文並加以潤色
//--------------------------------------------------------------
// 提示: 此配置文件中, 只要是以 // 作為開頭的行, 都是注釋信息. 
// 注釋信息您可以隨意修改, 不會幹擾服務器的任何行為. 
//--------------------------------------------------------------

// WEB 接口服務器會監聽來自這個 IP 地址的網卡信息
// 注意: 該選項允許你在有多個公網網卡(也意味著有多個公網 IP)的機器上, 
//       使用相同的"WEB 接口服務器端口"來開多個服. 
// 提醒: 若您想啟用 bind_ip 選項的話, 記得去掉 bind_ip 前面的注釋符: //,
//       否則服務器會忽略它, 導致配了和沒配一樣. 
//bind_ip: 127.0.0.1
 
// WEB 接口服務器端口 (默認端口為: 3000)
// 此端口會開放給遊戲客戶端用於建立 HTTP 請求
web_port: 3000

// 當自動轉碼不適用時, 將 UTF8 數據以什麽樣的編碼進行保存?
// 
// 客戶端與 WEB 接口服務器進行通訊的時候將會使用 UTF8 編碼進行通訊,
// WEB 接口服務器內部會嘗試將客戶端發送來的信息轉碼成與數據庫連接一致的編碼.
// 
// 例如: 當您的 WEB 接口數據庫的連接編碼是 big5/gbk/utf8/utf8mb4 的時候,
// 程序將會自動把客戶端發來的 UTF8 內容轉換成 big5/gbk/utf8 編碼然後存儲到數據庫中.
// 
// 但若您的 WEB 接口數據庫連接編碼是 latin1 的話, 那麽程序無法進行編碼轉換工作,
// 因為將 UTF8 編碼的信息轉碼成 latin1 之後將會導致信息丟失.
// 
// 您可以在這里指定如果碰到此類情況時, 
// 程序應該將 UTF8 內容轉換成什麽編碼並存放到 latin1 編碼的數據表中.
// 
// 注意: 這樣的操作並不會導致數據丟失, 但可能會導致你的數據庫管理軟件 (例如: Navicat)
// 無法正確理解 latin1 表中存放的數據的真正編碼, 這回導致通過管理軟件查看數據的時候看到的中文是亂碼.
// 通常可以修改管理軟件的連接默認編碼來解決問題.
//
// 但如果可以的話, 依然推薦您簡體中文的服使用 gbk 編碼建立數據庫,
// 繁體中文的服使用 big5 編碼建立數據庫. 這樣將會獲得最大程度的自動轉碼支持.
//
// 提醒: 在正式開服之前一旦確定該選項的值, 那麽請不要再進行更改.
// 除非您準備重新清空數據一切重新再來, 否則在已經產生歷史數據後再改動此選項
// 會導致程序將無法再將之前保存的數據正確的轉換成 UTF8 編碼.
character_codepage: utf8

// 往控制台窗口中顯示內容時, 在每行信息的前面加上時間戳. 
// 最終組成的時間最大長度不能超過 20 個字符.
//  
// 常用的時間格式有:
//    %I:%M:%S %p (小時:分鐘:秒數 12小時制, 會攜帶AM或PM標記)
//    %H:%M:%S (小時:分鐘:秒數, 24小時制)
//    %d/%b/%Y (日期/月份/年份)
// 更多的格式信息, 請參考 C 語言的 strftime 函數用法. 
// 
// rAthena 官方默認值是 [%d/%b %H:%M] 也就是24小時制的 [日/月 時:分]
// 這明顯不符合國人習慣, 為此Giraffe<模擬器>將其默認值改成了 [%Y/%m/%d %H:%M] 
// 
// 若想啟用時間戳的話, 請將下面這一行頭部的注釋符//去掉
//timestamp_format: [%Y/%m/%d %H:%M] 

// 當服務端程序被一些啟動器 (LeeStarter) 運行, 從而導致輸出信息被重定向時, 
// 是否也將顏色代碼一同輸出? 
// 
// 問: 這里提到的重定向是指什麽? 
// 答: 原本登錄服務器的信息將直接顯示到控制台窗口, 不過若使用一些啟動工具
//     來啟動登錄服務器的話, 原本應該顯示到控制台的信息, 就會被"劫持"到了
//     啟動工具里面顯示, 這種情況稱之為"輸出信息被重定向了"!
// 
// 問: 這里提到的顏色代碼是指什麽? 
// 答: 在我們查看控制台的過程中, 會發現類似 [Status] 的字是綠色的, 
//     而 [Error] 是紅色的. 這是因為在程序往控制台輸出信息時, 加入了一些
//     顏色編碼的緣故. 比如, 若使用顏色編碼 "\033[1;31m" 那麽則表示接下來的
//     字符用紅色輸出. 其實有點類似我們腳本中使用的 ^xxxxxx 顏色代碼. 
// 
// 此選項一般情況下推薦關閉, 因為基本沒什麽啟動器支持著色
stdout_with_ansisequence: no

// 記錄 WEB 接口服務器在控制台中產生的部分信息到 /log/ 目錄中
// 首先您要確保Giraffe<模擬器>的目錄中有一個 log 文件夾, 沒有的話必須手動創建, 
// 否則日志文件將不會產生.
// 
// 1: 記錄控制台中以  [Warning] 開頭的警告信息
// 2: 記錄控制台中以  [Error]   開頭的錯誤信息和數據庫錯誤信息
// 4: 記錄控制台中以  [Debug]   開頭的調試信息
// 
// 例如: 想要記錄 [Warning]、[Error]、[Debug] 開頭的信息, 
//       只需要將1、2、4相加, 將 console_msg_log 設置為 7 即可 (1+2+4)! 
// 
// 日志信息的記錄並不會被 console_silent 選項影響.
// 也就是說假如 console_msg_log 設置為 2 想記錄 [Error] 信息,
// 而在 console_silent 中設置為 16 想隱藏 [Error] 信息,
// 此時系統將會隱藏 [Error] 信息不顯示到控制台, 但與此同時會記錄 [Error] 信息到日志中
console_msg_log: 0

// 將 WEB 接口服務器在控制台中產生的要記錄的信息, 寫到下面指定的日志文件中
console_log_filepath: ./log/web-msg_log.log

// 選擇性隱藏 WEB 接口服務器控制台中顯示出來的一些提示信息: 
// 1:  隱藏控制台中以  [Info]    開頭的提示信息
// 2:  隱藏控制台中以  [Status]  開頭的狀態信息
// 4:  隱藏控制台中以  [Notice]  開頭的注意信息
// 8:  隱藏控制台中以  [Warning] 開頭的警告信息
// 16: 隱藏控制台中以  [Error]   開頭的錯誤信息和數據庫錯誤信息
// 32: 隱藏控制台中以  [Debug]   開頭的調試信息
// 若您想同時隱藏多種信息, 只需要將其對應的數字相加即可
// 例如: 若您想要隱藏[Info]、[Status]、[Notice]開頭的信息, 
//       那麽只需要將1、2、4相加, 填寫 7 即可 (1+2+4)
console_silent: 0

// 是否打印請求和響應信息?
// 每個 HTTP 會話接收到的請求和返回的響應都會被打印 (用於調試)
print_req_res: off

// 公會圖標最多只能允許百分之多少的透明色像素點? (百分比選項)
// 若上傳的公會圖標中透明的部分超過設定的百分比, 那麽會認為此圖標無效.
emblem_transparency_limit: 80

// 是否允許使用 GIF 圖片作為公會圖標?
allow_gifs: yes

import: conf/import/web_conf.txt
